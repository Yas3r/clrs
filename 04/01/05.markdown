> Use the following ideas to develop a nonrecursive, linear-time algorithm for
> the maximum-subarray problem. Start at the left end of the array, and
> progress toward the right, keeping track of the maximum subarray seen so
> far. Knowing a maximum subarray $A[1..j]$, extend the answer to find a
> maximum subarray ending at index $j + 1$ by using the following observation:
> a maximum subarray $A[i..j+1]$, for some $1 \leq i \leq j + 1$. Determine a
> maximum subarray of the form $A[i..j+1]$ in constant time based on knowing a
> maximum subarray ending at index $j$.

We need to build an array $S$ that holds the maximum subarrays ending on each
index of $A$. That is, $S[j]$ holds information about the maximum subarray
ending on $j$.

We first loop through the input to build $S$. Afterwards, we do what they
suggest in the text. This is $n + n = 2n = \Theta(n)$.

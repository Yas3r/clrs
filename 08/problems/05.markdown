## Average sorting

> Suppose that instead of sorting an array, we just require that the elements
> increase on average. More precisely, we call an $n$-element array
> **k-sorted** if, for all $i = 1, 2, \ldots, n - k$, the following holds:
>
> $$ \frac{\sum_{j=i}^{i+k-1}A[j]}{k} \le
>    \frac{\sum_{j=i + 1}^{i+k}A[j]}{k} $$
>
> <ol type="a">
>   <li>What does it mean for an array to be 1-sorted?
>   <li>Give a permutation of the numbers $1, 2, \ldots, 10$ that is 2-sorted,
>       but not sorted
>   <li>Prove that an $n$-element array is k-sorted if and only if $A[i] \le
>       A[i+k]$ for all $i = 1, 2, \ldots, n-k$.
>   <li>Give an algorithm that $k$-sorts an $n$-element array in
>       $\O(n\lg(n/k))$ time.
> </ol>
>
> We can also show a lower bound on the time to produce a $k$-sorted array,
> when $k$ is a constant.
>
> <ol type="a" start="5">
>   <li>Show that we can sort a $k$-sorted array of length $n$ in
>       $\O(n\lg{k})$ time. (<i>Hint:</i> Use the solution to exercise 6.5-9.)
>   <li>Show that when $k$ is a constant, $k$-sorting an $n$-element array
>       requires $\Omega(n\lg{n})$ time. (<i>Hint:</i> Use the solution to the
>       previous part along with the lower bound on comparison sorts.)
> </ol>

### Intuitive description

I'm going to state an unintuitive description of what does it mean for an
array to be $k$-sorted. It will be presented without proof. It will become
evident later in the text.

If we write out $k$-sorted array in a grid with $k$ columns, each column will
be sorted from top to bottom. This is essentially what (c) means.

### Various notions

For an array to be 1-sorted it means that it is sorted in the traditional
sense of the word, that is, $A[i] \le A[i+1]$ for each index $i$.

Here's a 2-sorted permutation that is not sorted: $2, 1, 4, 3, 6, 5, 8, 7, 10,
9$.

### Alternative condition

Let's assume that an array is $k$-sorted. Then:

$$ \frac{\sum_{j=i}^{i+k-1}A[j]}{k} \le \frac{\sum_{j=i + 1}^{i+k}A[j]}{k} \\\\
   \Updownarrow \\\\
   \frac{A[i] + \sum_{j=i+1}^{i+k-1}A[j]}{k} \le
     \frac{\sum_{j=i+1}^{i+k-1}A[j] + A[i+k]}{k} \\\\
   \Updownarrow \\\\
   \frac{A[i]}{k} \le \frac{A[i+k]}{k} \\\\
   \Updownarrow \\\\
   A[i] \le A[i+k] $$

Note that this derivation works backwards for proving the **if** part.

### The algorithms

To $k$-sort the array, we need to sort the $k$ columns, that is, $k$ arrays of
$n/k$ elements. This is a $(n/k)\lg(n/k)$ algorithm, performed $k$ times. We
can use merge-sort. We don't even need to copy the array - we can calculate
the indices on the fly, although that turned less fun than expected.

To sort a $k$-sorted array, we just do what we suggested in exercise 6.5-9 -
we build a min heap and every time we take an element from it, we pick another
element from the column the minimal element was in. Keeping track of that in C
is a bit hairy, so the implementation is gruesome. There is a new operation,
`MIN-HEAP-PUSH-POP`, that is an improvement over first extracting the element
and then inserting another one.

### Lower bound on comparisons

The problem can be reduced to $k$ problems of size $(n/k)$, each with minimal
number of comparisons $\Omega((n/k)\lg(n/k))$. The total is
$\Omega(n\lg(n/k))$ and if $k$ is a constant, we get a very familiar
$\Omega(n\lg{n})$. Really not that surprising.
